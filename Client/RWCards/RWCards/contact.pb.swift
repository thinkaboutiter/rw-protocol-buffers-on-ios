// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: contact.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Contact: SwiftProtobuf.Message {
  static let protoMessageName: String = "Contact"

  var firstName: String = String()

  var lastName: String = String()

  var twitterName: String = String()

  var email: String = String()

  var githubLink: String = String()

  var type: Contact.ContactType = .speaker

  var imageName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ContactType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case speaker // = 0
    case attendant // = 1
    case volunteer // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .speaker
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .speaker
      case 1: self = .attendant
      case 2: self = .volunteer
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .speaker: return 0
      case .attendant: return 1
      case .volunteer: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.firstName)
      case 2: try decoder.decodeSingularStringField(value: &self.lastName)
      case 3: try decoder.decodeSingularStringField(value: &self.twitterName)
      case 4: try decoder.decodeSingularStringField(value: &self.email)
      case 5: try decoder.decodeSingularStringField(value: &self.githubLink)
      case 6: try decoder.decodeSingularEnumField(value: &self.type)
      case 7: try decoder.decodeSingularStringField(value: &self.imageName)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.firstName.isEmpty {
      try visitor.visitSingularStringField(value: self.firstName, fieldNumber: 1)
    }
    if !self.lastName.isEmpty {
      try visitor.visitSingularStringField(value: self.lastName, fieldNumber: 2)
    }
    if !self.twitterName.isEmpty {
      try visitor.visitSingularStringField(value: self.twitterName, fieldNumber: 3)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 4)
    }
    if !self.githubLink.isEmpty {
      try visitor.visitSingularStringField(value: self.githubLink, fieldNumber: 5)
    }
    if self.type != .speaker {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 6)
    }
    if !self.imageName.isEmpty {
      try visitor.visitSingularStringField(value: self.imageName, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Speakers: SwiftProtobuf.Message {
  static let protoMessageName: String = "Speakers"

  var contacts: [Contact] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.contacts)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contacts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.contacts, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Contact: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "first_name"),
    2: .standard(proto: "last_name"),
    3: .standard(proto: "twitter_name"),
    4: .same(proto: "email"),
    5: .standard(proto: "github_link"),
    6: .same(proto: "type"),
    7: .same(proto: "imageName"),
  ]

  func _protobuf_generated_isEqualTo(other: Contact) -> Bool {
    if self.firstName != other.firstName {return false}
    if self.lastName != other.lastName {return false}
    if self.twitterName != other.twitterName {return false}
    if self.email != other.email {return false}
    if self.githubLink != other.githubLink {return false}
    if self.type != other.type {return false}
    if self.imageName != other.imageName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Contact.ContactType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SPEAKER"),
    1: .same(proto: "ATTENDANT"),
    2: .same(proto: "VOLUNTEER"),
  ]
}

extension Speakers: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contacts"),
  ]

  func _protobuf_generated_isEqualTo(other: Speakers) -> Bool {
    if self.contacts != other.contacts {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
